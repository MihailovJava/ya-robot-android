buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.2.3'
    }
}


apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'realm-android'
apply plugin: 'com.jakewharton.hugo'

android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion 23
    buildToolsVersion '23.0.3'

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }



    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'  // Some libraries have issues with this
        disable 'OldTargetApi'
        // Due to Robolectric that modifies the manifest when running tests
    }
}

dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
    def testDependencies = rootProject.ext.dataTestDependencies
    def developmentDependencies = rootProject.ext.developmentDependencies;
    compile project(':domain');
    apt dataDependencies.daggerCompiler;
    provided dataDependencies.javaxAnnotation;
    compile dataDependencies.dagger;
    compile dataDependencies.okHttp;
    compile dataDependencies.gson;
    compile dataDependencies.okhhtpLogger;
    compile dataDependencies.rxJava;
    compile dataDependencies.rxAndroid;
    compile dataDependencies.androidAnnotations;
    compile dataDependencies.logger;
    compile dataDependencies.jodaTime;
    compile developmentDependencies.leakCanary;
    testCompile testDependencies.junit;
    testCompile testDependencies.assertj;
    testCompile testDependencies.mockito;
}